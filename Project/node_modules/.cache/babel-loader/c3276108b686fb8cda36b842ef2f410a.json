{"ast":null,"code":"// src/refs.ts\nimport { isFunction } from \"@chakra-ui/utils\";\nfunction assignRef(ref, value) {\n  if (ref == null) return;\n  if (isFunction(ref)) {\n    ref(value);\n    return;\n  }\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(\"Cannot assign value '\".concat(value, \"' to ref '\").concat(ref, \"'\"));\n  }\n}\nfunction mergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  return function (node) {\n    refs.forEach(function (ref) {\n      return assignRef(ref, node);\n    });\n  };\n}\n\n// src/context.ts\nimport { createContext as createReactContext, useContext as useReactContext } from \"react\";\nfunction createContext() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$strict = options.strict,\n    strict = _options$strict === void 0 ? true : _options$strict,\n    _options$errorMessage = options.errorMessage,\n    errorMessage = _options$errorMessage === void 0 ? \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\" : _options$errorMessage,\n    name = options.name;\n  var Context = createReactContext(void 0);\n  Context.displayName = name;\n  function useContext() {\n    var _a;\n    var context = useReactContext(Context);\n    if (!context && strict) {\n      var error = new Error(errorMessage);\n      error.name = \"ContextError\";\n      (_a = Error.captureStackTrace) == null ? void 0 : _a.call(Error, error, useContext);\n      throw error;\n    }\n    return context;\n  }\n  return [Context.Provider, useContext, Context];\n}\n\n// src/children.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(function (child) {\n    return isValidElement(child);\n  });\n}\nexport { assignRef, createContext, getValidChildren, mergeRefs };","map":{"version":3,"names":["isFunction","assignRef","ref","value","current","error","Error","mergeRefs","refs","node","forEach","createContext","createReactContext","useContext","useReactContext","options","strict","errorMessage","name","Context","displayName","_a","context","captureStackTrace","call","Provider","Children","isValidElement","getValidChildren","children","toArray","filter","child"],"sources":["C:/Users/Bhavesh/Desktop/Visual Studio/Unit4Project/CW-4/Project/node_modules/@chakra-ui/react-utils/dist/index.esm.js"],"sourcesContent":["// src/refs.ts\r\nimport { isFunction } from \"@chakra-ui/utils\";\r\nfunction assignRef(ref, value) {\r\n  if (ref == null)\r\n    return;\r\n  if (isFunction(ref)) {\r\n    ref(value);\r\n    return;\r\n  }\r\n  try {\r\n    ref.current = value;\r\n  } catch (error) {\r\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\r\n  }\r\n}\r\nfunction mergeRefs(...refs) {\r\n  return (node) => {\r\n    refs.forEach((ref) => assignRef(ref, node));\r\n  };\r\n}\r\n\r\n// src/context.ts\r\nimport {\r\n  createContext as createReactContext,\r\n  useContext as useReactContext\r\n} from \"react\";\r\nfunction createContext(options = {}) {\r\n  const {\r\n    strict = true,\r\n    errorMessage = \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\",\r\n    name\r\n  } = options;\r\n  const Context = createReactContext(void 0);\r\n  Context.displayName = name;\r\n  function useContext() {\r\n    var _a;\r\n    const context = useReactContext(Context);\r\n    if (!context && strict) {\r\n      const error = new Error(errorMessage);\r\n      error.name = \"ContextError\";\r\n      (_a = Error.captureStackTrace) == null ? void 0 : _a.call(Error, error, useContext);\r\n      throw error;\r\n    }\r\n    return context;\r\n  }\r\n  return [\r\n    Context.Provider,\r\n    useContext,\r\n    Context\r\n  ];\r\n}\r\n\r\n// src/children.ts\r\nimport { Children, isValidElement } from \"react\";\r\nfunction getValidChildren(children) {\r\n  return Children.toArray(children).filter((child) => isValidElement(child));\r\n}\r\nexport {\r\n  assignRef,\r\n  createContext,\r\n  getValidChildren,\r\n  mergeRefs\r\n};\r\n"],"mappings":"AAAA;AACA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,SAAS,CAACC,GAAG,EAAEC,KAAK,EAAE;EAC7B,IAAID,GAAG,IAAI,IAAI,EACb;EACF,IAAIF,UAAU,CAACE,GAAG,CAAC,EAAE;IACnBA,GAAG,CAACC,KAAK,CAAC;IACV;EACF;EACA,IAAI;IACFD,GAAG,CAACE,OAAO,GAAGD,KAAK;EACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,gCAAyBH,KAAK,uBAAaD,GAAG,OAAI;EACnE;AACF;AACA,SAASK,SAAS,GAAU;EAAA,kCAANC,IAAI;IAAJA,IAAI;EAAA;EACxB,OAAO,UAACC,IAAI,EAAK;IACfD,IAAI,CAACE,OAAO,CAAC,UAACR,GAAG;MAAA,OAAKD,SAAS,CAACC,GAAG,EAAEO,IAAI,CAAC;IAAA,EAAC;EAC7C,CAAC;AACH;;AAEA;AACA,SACEE,aAAa,IAAIC,kBAAkB,EACnCC,UAAU,IAAIC,eAAe,QACxB,OAAO;AACd,SAASH,aAAa,GAAe;EAAA,IAAdI,OAAO,uEAAG,CAAC,CAAC;EACjC,sBAIIA,OAAO,CAHTC,MAAM;IAANA,MAAM,gCAAG,IAAI;IAAA,wBAGXD,OAAO,CAFTE,YAAY;IAAZA,YAAY,sCAAG,4FAA4F;IAC3GC,IAAI,GACFH,OAAO,CADTG,IAAI;EAEN,IAAMC,OAAO,GAAGP,kBAAkB,CAAC,KAAK,CAAC,CAAC;EAC1CO,OAAO,CAACC,WAAW,GAAGF,IAAI;EAC1B,SAASL,UAAU,GAAG;IACpB,IAAIQ,EAAE;IACN,IAAMC,OAAO,GAAGR,eAAe,CAACK,OAAO,CAAC;IACxC,IAAI,CAACG,OAAO,IAAIN,MAAM,EAAE;MACtB,IAAMX,KAAK,GAAG,IAAIC,KAAK,CAACW,YAAY,CAAC;MACrCZ,KAAK,CAACa,IAAI,GAAG,cAAc;MAC3B,CAACG,EAAE,GAAGf,KAAK,CAACiB,iBAAiB,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGF,EAAE,CAACG,IAAI,CAAClB,KAAK,EAAED,KAAK,EAAEQ,UAAU,CAAC;MACnF,MAAMR,KAAK;IACb;IACA,OAAOiB,OAAO;EAChB;EACA,OAAO,CACLH,OAAO,CAACM,QAAQ,EAChBZ,UAAU,EACVM,OAAO,CACR;AACH;;AAEA;AACA,SAASO,QAAQ,EAAEC,cAAc,QAAQ,OAAO;AAChD,SAASC,gBAAgB,CAACC,QAAQ,EAAE;EAClC,OAAOH,QAAQ,CAACI,OAAO,CAACD,QAAQ,CAAC,CAACE,MAAM,CAAC,UAACC,KAAK;IAAA,OAAKL,cAAc,CAACK,KAAK,CAAC;EAAA,EAAC;AAC5E;AACA,SACE/B,SAAS,EACTU,aAAa,EACbiB,gBAAgB,EAChBrB,SAAS"},"metadata":{},"sourceType":"module"}