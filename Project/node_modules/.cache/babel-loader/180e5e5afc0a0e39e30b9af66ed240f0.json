{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar utils = require('@motionone/utils');\nvar data = require('../data.cjs.js');\n\n/**\n * A list of all transformable axes. We'll use this list to generated a version\n * of each axes for each transform.\n */\nvar axes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * An ordered array of each transformable value. By default, transform values\n * will be sorted to this order.\n */\nvar order = [\"translate\", \"scale\", \"rotate\", \"skew\"];\nvar transformAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\"\n};\nvar rotation = {\n  syntax: \"<angle>\",\n  initialValue: \"0deg\",\n  toDefaultUnit: function toDefaultUnit(v) {\n    return v + \"deg\";\n  }\n};\nvar baseTransformProperties = {\n  translate: {\n    syntax: \"<length-percentage>\",\n    initialValue: \"0px\",\n    toDefaultUnit: function toDefaultUnit(v) {\n      return v + \"px\";\n    }\n  },\n  rotate: rotation,\n  scale: {\n    syntax: \"<number>\",\n    initialValue: 1,\n    toDefaultUnit: utils.noopReturn\n  },\n  skew: rotation\n};\nvar transformDefinitions = new Map();\nvar asTransformCssVar = function asTransformCssVar(name) {\n  return \"--motion-\".concat(name);\n};\n/**\n * Generate a list of every possible transform key\n */\nvar transforms = [\"x\", \"y\", \"z\"];\norder.forEach(function (name) {\n  axes.forEach(function (axis) {\n    transforms.push(name + axis);\n    transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);\n  });\n});\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */\nvar compareTransformOrder = function compareTransformOrder(a, b) {\n  return transforms.indexOf(a) - transforms.indexOf(b);\n};\n/**\n * Provide a quick way to check if a string is the name of a transform\n */\nvar transformLookup = new Set(transforms);\nvar isTransform = function isTransform(name) {\n  return transformLookup.has(name);\n};\nvar addTransformToElement = function addTransformToElement(element, name) {\n  // Map x to translateX etc\n  if (transformAlias[name]) name = transformAlias[name];\n  var _data$getAnimationDat = data.getAnimationData(element),\n    transforms = _data$getAnimationDat.transforms;\n  utils.addUniqueItem(transforms, name);\n  /**\n   * TODO: An optimisation here could be to cache the transform in element data\n   * and only update if this has changed.\n   */\n  element.style.transform = buildTransformTemplate(transforms);\n};\nvar buildTransformTemplate = function buildTransformTemplate(transforms) {\n  return transforms.sort(compareTransformOrder).reduce(transformListToString, \"\").trim();\n};\nvar transformListToString = function transformListToString(template, name) {\n  return \"\".concat(template, \" \").concat(name, \"(var(\").concat(asTransformCssVar(name), \"))\");\n};\nexports.addTransformToElement = addTransformToElement;\nexports.asTransformCssVar = asTransformCssVar;\nexports.axes = axes;\nexports.buildTransformTemplate = buildTransformTemplate;\nexports.compareTransformOrder = compareTransformOrder;\nexports.isTransform = isTransform;\nexports.transformAlias = transformAlias;\nexports.transformDefinitions = transformDefinitions;","map":{"version":3,"names":["Object","defineProperty","exports","value","utils","require","data","axes","order","transformAlias","x","y","z","rotation","syntax","initialValue","toDefaultUnit","v","baseTransformProperties","translate","rotate","scale","noopReturn","skew","transformDefinitions","Map","asTransformCssVar","name","transforms","forEach","axis","push","set","compareTransformOrder","a","b","indexOf","transformLookup","Set","isTransform","has","addTransformToElement","element","getAnimationData","addUniqueItem","style","transform","buildTransformTemplate","sort","reduce","transformListToString","trim","template"],"sources":["C:/Users/Bhavesh/Desktop/Visual Studio/bhavesh_khandar_fw21_0749/unit-4/sprint-4/day-4/assignments/Project/node_modules/@motionone/dom/dist/animate/utils/transforms.cjs.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('@motionone/utils');\nvar data = require('../data.cjs.js');\n\n/**\n * A list of all transformable axes. We'll use this list to generated a version\n * of each axes for each transform.\n */\nconst axes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * An ordered array of each transformable value. By default, transform values\n * will be sorted to this order.\n */\nconst order = [\"translate\", \"scale\", \"rotate\", \"skew\"];\nconst transformAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n};\nconst rotation = {\n    syntax: \"<angle>\",\n    initialValue: \"0deg\",\n    toDefaultUnit: (v) => v + \"deg\",\n};\nconst baseTransformProperties = {\n    translate: {\n        syntax: \"<length-percentage>\",\n        initialValue: \"0px\",\n        toDefaultUnit: (v) => v + \"px\",\n    },\n    rotate: rotation,\n    scale: {\n        syntax: \"<number>\",\n        initialValue: 1,\n        toDefaultUnit: utils.noopReturn,\n    },\n    skew: rotation,\n};\nconst transformDefinitions = new Map();\nconst asTransformCssVar = (name) => `--motion-${name}`;\n/**\n * Generate a list of every possible transform key\n */\nconst transforms = [\"x\", \"y\", \"z\"];\norder.forEach((name) => {\n    axes.forEach((axis) => {\n        transforms.push(name + axis);\n        transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);\n    });\n});\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */\nconst compareTransformOrder = (a, b) => transforms.indexOf(a) - transforms.indexOf(b);\n/**\n * Provide a quick way to check if a string is the name of a transform\n */\nconst transformLookup = new Set(transforms);\nconst isTransform = (name) => transformLookup.has(name);\nconst addTransformToElement = (element, name) => {\n    // Map x to translateX etc\n    if (transformAlias[name])\n        name = transformAlias[name];\n    const { transforms } = data.getAnimationData(element);\n    utils.addUniqueItem(transforms, name);\n    /**\n     * TODO: An optimisation here could be to cache the transform in element data\n     * and only update if this has changed.\n     */\n    element.style.transform = buildTransformTemplate(transforms);\n};\nconst buildTransformTemplate = (transforms) => transforms\n    .sort(compareTransformOrder)\n    .reduce(transformListToString, \"\")\n    .trim();\nconst transformListToString = (template, name) => `${template} ${name}(var(${asTransformCssVar(name)}))`;\n\nexports.addTransformToElement = addTransformToElement;\nexports.asTransformCssVar = asTransformCssVar;\nexports.axes = axes;\nexports.buildTransformTemplate = buildTransformTemplate;\nexports.compareTransformOrder = compareTransformOrder;\nexports.isTransform = isTransform;\nexports.transformAlias = transformAlias;\nexports.transformDefinitions = transformDefinitions;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}